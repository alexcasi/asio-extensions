declare_args() {
  # AsioExt can be built as a header only library or a separate compilation.
  # Enabling this adds the ASIOEXT_SEPARATE_COMPILATION define.
  asioext_header_only = true

  # Use the Boost variant of Asio.
  asioext_use_boost_asio = true

  # Enable Boost.Filesystem path support.
  asioext_use_boost_fs = false

  # Build without external dependencies.
  asioext_standalone = false
}

config("asioext_config") {
  defines = []
  include_dirs = [ "include" ]

  if (asioext_use_boost_asio) {
    defines += [ "ASIOEXT_USE_BOOST_ASIO" ]
  }
  if (!asioext_header_only) {
    defines += [ "ASIOEXT_SEPARATE_COMPILATION" ]
  }
}

source_set("asioext") {
  sources = [
    "include/asioext/asioext.hpp",
    "include/asioext/detail/buffer.hpp",
    "include/asioext/detail/buffer_sequence_adapter.hpp",
    "include/asioext/detail/config.hpp",
    "include/asioext/detail/cstdint.hpp",
    "include/asioext/detail/error.hpp",
    "include/asioext/detail/error_code.hpp",
    "include/asioext/detail/throw_error.hpp",
    "include/asioext/file_handle.hpp",
    "include/asioext/impl/file_handle.hpp",
    "include/asioext/impl/read_file.hpp",
    "include/asioext/open.hpp",
    "include/asioext/open_flags.hpp",
    "include/asioext/read_file.hpp",
    "include/asioext/scoped_file_handle.hpp",
    "include/asioext/standard_streams.hpp",
  ]

  if (!asioext_header_only) {
    sources += [
      "include/asioext/impl/file_handle.cpp",
      "include/asioext/impl/open.cpp",
      "include/asioext/impl/open_flags.cpp",
      "include/asioext/impl/scoped_file_handle.cpp",
      "include/asioext/impl/standard_streams.cpp",
    ]
  }

  if (is_win) {
    sources += [
      "include/asioext/detail/win_file_ops.hpp",
      "include/asioext/detail/win_path.hpp",
    ]

    if (!asioext_header_only) {
      sources += [
        "include/asioext/detail/impl/win_file_ops.cpp",
        "include/asioext/detail/impl/win_path.cpp",
        "include/asioext/impl/file_handle_win.cpp",
        "include/asioext/impl/scoped_file_handle_win.cpp",
      ]
    }
  } else {
    sources += [ "include/asioext/detail/posix_file_ops.hpp" ]
    if (!asioext_header_only) {
      sources += [
        "include/asioext/detail/impl/posix_file_ops.cpp",
        "include/asioext/impl/file_handle_posix.cpp",
        "include/asioext/impl/scoped_file_handle_posix.cpp",
      ]
    }
  }

  public_configs = [ ":asioext_config" ]
  public_deps = []

  assert(!asioext_standalone || !asioext_use_boost_fs,
         "Cannot use asioext_standalone with asioext_use_boost_fs")

  if (asioext_use_boost_fs) {
    public_deps += [ "$external/boost/libs/filesystem" ]
  }

  if (asioext_use_boost_asio) {
    public_deps += [ "$external/boost/libs/asio" ]
  }
}

executable("asioext_unittests") {
  testonly = true

  sources = [
    "test/main.cpp",
    "test/open_flags.cpp",
    "test/read_file.cpp",
    "test/scoped_file_handle.cpp",
  ]

  deps = [
    ":asioext",
    "$external/boost/libs/filesystem",
    "$external/boost/libs/test:unit_test_framework",
  ]
}
